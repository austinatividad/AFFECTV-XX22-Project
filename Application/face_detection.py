
from mediapipe import solutions, tasks, ImageFormat, Image
from mediapipe.framework.formats import landmark_pb2
import numpy as np

MASK_MODE_FULL = 0
MASK_MODE_SIMPLIFIED = 1
MASK_MODE_LEFT = 2

FACEMESH_LEFTSIDE = frozenset([(127, 34), (34, 139), (139, 127), (11, 0), (0, 37), (37, 11), (232, 231), (231, 120), (120, 232), (72, 37), (37, 39), (39, 72), (128, 121), (121, 47), (47, 128), (232, 121), (121, 128), (128, 232), (104, 69), (69, 67), (67, 104), (175, 171), (171, 148), (148, 175), (118, 50), (50, 101), (101, 118), (73, 39), (39, 40), (40, 73), (9, 151), (151, 108), (108, 9), (48, 115), (115, 131), (131, 48), (194, 204), (204, 211), (211, 194), (74, 40), (40, 185), (185, 74), (80, 42), (42, 183), (183, 80), (40, 92), (92, 186), (186, 40), (230, 229), (229, 118), (118, 230), (202, 212), (212, 214), (214, 202), (83, 18), (18, 17), (17, 83), (76, 61), (61, 146), (146, 76), (160, 29), (29, 30), (30, 160), (56, 157), (157, 173), (173, 56), (106, 204), (204, 194), (194, 106), (135, 214), (214, 192), (192, 135), (203, 165), (165, 98), (98, 203), (21, 71), (71, 68), (68, 21), (51, 45), (45, 4), (4, 51), (144, 24), (24, 23), (23, 144), (77, 146), (146, 91), (91, 77), (205, 50), (50, 187), (187, 205), (201, 200), (200, 18), (18, 201), (91, 106), (106, 182), (182, 91), (90, 91), (91, 181), (181, 90), (85, 84), (84, 17), (17, 85), (206, 203), (203, 36), (36, 206), (148, 171), (171, 140), (140, 148), (92, 40), (40, 39), (39, 92), (193, 189), (189, 244), (244, 193), (159, 158), (158, 28), (28, 159), (247, 246), (246, 161), (161, 247), (236, 3), (3, 196), (196, 236), (54, 68), (68, 104), (104, 54), (193, 168), (168, 8), (8, 193), (117, 228), (228, 31), (31, 117), (189, 193), (193, 55), (55, 189), (98, 97), (97, 99), (99, 98), (126, 47), (47, 100), (100, 126), (166, 79), (79, 218), (218, 166), (155, 154), (154, 26), (26, 155), (131, 209), (135, 136), (136, 150), (150, 135), (47, 126), (126, 217), (217, 47), (223, 52), (52, 53), (53, 223), (45, 51), (51, 134), (134, 45), (211, 170), (170, 140), (140, 211), (67, 69), (69, 108), (108, 67), (43, 106), (106, 91), (91, 43), (230, 119), (119, 120), (120, 230), (130, 247), (63, 53), (53, 52), (52, 63), (238, 20), (20, 242), (242, 238), (46, 70), (70, 156), (156, 46), (96, 78), (46, 53), (53, 63), (63, 46), (143, 34), (123, 117), (117, 111), (111, 123), (44, 125), (125, 19), (19, 44), (236, 134), (134, 51), (51, 236), (216, 206), (206, 205), (205, 216), (154, 153), (153, 22), (22, 154), (39, 37), (37, 167), (167, 39), (200, 201), (201, 208), (208, 200), (36, 142), (142, 100), (100, 36), (57, 212), (212, 202), (202, 57), (20, 60), (60, 99), (99, 20), (28, 158), (158, 157), (157, 28), (113, 35), (160, 159), (159, 27), (27, 160), (204, 202), (202, 210), (210, 204), (113, 225), (225, 46), (46, 113), (43, 202), (202, 204), (204, 43), (76, 77), (137, 123), (123, 116), (116, 137), (41, 38), (38, 72), (72, 41), (203, 129), (129, 142), (142, 203), (64, 98), (98, 240), (240, 64), (102, 64), (41, 73), (73, 74), (74, 41), (212, 216), (216, 207), (207, 212), (42, 74), (74, 184), (184, 42), (169, 170), (170, 211), (211, 169), (170, 149), (149, 176), (176, 170), (105, 66), (66, 69), (69, 105), (122, 6), (6, 168), (168, 122), (123, 147), (147, 187), (187, 123), (96, 77), (77, 90), (90, 96), (65, 55), (55, 107), (107, 65), (89, 90), (90, 180), (180, 89), (101, 100), (100, 120), (120, 101), (63, 105), (105, 104), (104, 63), (93, 137), (15, 86), (86, 85), (85, 15), (129, 102), (14, 87), (87, 86), (86, 14), (55, 8), (8, 9), (9, 55), (100, 47), (47, 121), (121, 100), (145, 23), (23, 22), (22, 145), (88, 89), (89, 179), (179, 88), (6, 122), (122, 196), (196, 6), (88, 95), (95, 96), (96, 88), (138, 172), (172, 136), (136, 138), (215, 58), (58, 172), (172, 215), (115, 48), (48, 219), (219, 115), (42, 80), (80, 81), (81, 42), (195, 3), (3, 51), (51, 195), (43, 146), (146, 61), (61, 43), (171, 175), (175, 199), (199, 171), (81, 82), (82, 38), (38, 81), (53, 46), (46, 225), (225, 53), (144, 163), (163, 110), (110, 144), (52, 65), (65, 66), (66, 52), (229, 228), (228, 117), (117, 229), (34, 127), (107, 108), (108, 69), (69, 107), (109, 108), (108, 151), (151, 109), (48, 64), (64, 235), (235, 48), (78, 191), (129, 209), (209, 126), (126, 129), (111, 35), (35, 143), (143, 111), (117, 123), (123, 50), (50, 117), (65, 52), (19, 125), (125, 141), (141, 19), (221, 55), (55, 65), (65, 221), (3, 195), (195, 197), (197, 3), (25, 7), (7, 33), (33, 25), (220, 237), (237, 44), (44, 220), (70, 71), (71, 139), (139, 70), (122, 193), (193, 245), (245, 122), (247, 130), (130, 33), (33, 247), (71, 21), (21, 162), (162, 71), (170, 169), (169, 150), (150, 170), (188, 174), (174, 196), (196, 188), (216, 186), (186, 92), (92, 216), (2, 97), (97, 167), (167, 2), (141, 125), (125, 241), (241, 141), (164, 167), (167, 37), (37, 164), (72, 38), (38, 12), (12, 72), (38, 82), (82, 13), (13, 38), (63, 68), (68, 71), (71, 63), (35, 111), (101, 50), (50, 205), (205, 101), (206, 92), (92, 165), (165, 206), (209, 198), (198, 217), (217, 209), (165, 167), (167, 97), (97, 165), (220, 115), (115, 218), (218, 220), (133, 112), (112, 243), (243, 133), (239, 238), (238, 241), (241, 239), (214, 135), (135, 169), (169, 214), (190, 173), (173, 133), (133, 190), (171, 208), (208, 32), (32, 171), (125, 44), (44, 237), (237, 125), (86, 87), (87, 178), (178, 86), (85, 86), (86, 179), (179, 85), (84, 85), (85, 180), (180, 84), (83, 84), (84, 181), (181, 83), (201, 83), (83, 182), (182, 201), (137, 93), (93, 132), (132, 137), (183, 76), (61, 76), (76, 184), (184, 61), (57, 61), (61, 185), (185, 57), (212, 57), (57, 186), (186, 212), (214, 207), (207, 187), (187, 214), (34, 143), (143, 156), (156, 34), (79, 239), (239, 237), (237, 79), (123, 137), (137, 177), (177, 123), (44, 1), (1, 4), (4, 44), (201, 194), (194, 32), (32, 201), (64, 102), (102, 129), (129, 64), (213, 215), (215, 138), (138, 213), (59, 166), (166, 219), (219, 59), (242, 99), (99, 97), (97, 242), (2, 94), (94, 141), (141, 2), (75, 59), (59, 235), (235, 75), (24, 110), (110, 228), (228, 24), (25, 130), (23, 24), (24, 229), (229, 23), (22, 23), (23, 230), (230, 22), (26, 22), (22, 231), (231, 26), (112, 26), (26, 232), (232, 112), (189, 190), (190, 243), (243, 189), (221, 56), (56, 190), (190, 221), (28, 56), (56, 221), (221, 28), (27, 28), (29, 27), (27, 223), (223, 29), (30, 29), (29, 224), (224, 30), (247, 30), (30, 225), (225, 247), (238, 79), (79, 20), (20, 238), (166, 59), (59, 75), (75, 166), (60, 75), (75, 240), (240, 60), (147, 177), (177, 215), (215, 147), (20, 79), (79, 166), (166, 20), (187, 147), (147, 213), (213, 187), (112, 233), (233, 244), (244, 112), (233, 128), (128, 245), (245, 233), (128, 114), (114, 188), (188, 128), (114, 217), (217, 174), (174, 114), (131, 115), (115, 220), (220, 131), (217, 198), (198, 236), (236, 217), (198, 131), (131, 134), (134, 198), (177, 132), (132, 58), (58, 177), (143, 35), (35, 124), (124, 143), (110, 163), (163, 7), (7, 110), (228, 110), (110, 25), (25, 228), (175, 152), (5, 4), (16, 17), (1, 19), (200, 199), (15, 16), (14, 15), (6, 197), (195, 5), (10, 151), (19, 94), (2, 164), (164, 0), (11, 12), (12, 13), (133, 243), (243, 190), (190, 133), (133, 155), (155, 112), (112, 133), (33, 246), (246, 247), (247, 33), (33, 130), (130, 25), (25, 33), (75, 60), (60, 166), (166, 75), (238, 239), (239, 79), (79, 238), (162, 127), (127, 139), (139, 162), (72, 11), (11, 37), (37, 72), (121, 232), (232, 120), (120, 121), (73, 72), (72, 39), (39, 73), (114, 128), (128, 47), (47, 114), (233, 232), (232, 128), (128, 233), (103, 104), (104, 67), (67, 103), (152, 175), (175, 148), (148, 152), (119, 118), (118, 101), (101, 119), (74, 73), (73, 40), (40, 74), (107, 9), (9, 108), (108, 107), (48, 131), (32, 194), (194, 211), (211, 32), (184, 74), (74, 185), (185, 184), (191, 80), (80, 183), (183, 191), (185, 40), (40, 186), (186, 185), (119, 230), (230, 118), (118, 119), (210, 202), (202, 214), (214, 210), (84, 83), (83, 17), (17, 84), (77, 76), (76, 146), (146, 77), (161, 160), (160, 30), (30, 161), (190, 56), (56, 173), (173, 190), (182, 106), (106, 194), (194, 182), (138, 135), (135, 192), (192, 138), (129, 203), (203, 98), (98, 129), (54, 21), (21, 68), (68, 54), (5, 51), (51, 4), (4, 5), (145, 144), (144, 23), (23, 145), (90, 77), (77, 91), (91, 90), (207, 205), (205, 187), (187, 207), (83, 201), (201, 18), (18, 83), (181, 91), (91, 182), (182, 181), (180, 90), (90, 181), (181, 180), (16, 85), (85, 17), (17, 16), (205, 206), (206, 36), (36, 205), (176, 148), (148, 140), (140, 176), (165, 92), (92, 39), (39, 165), (245, 193), (193, 244), (244, 245), (27, 159), (159, 28), (28, 27), (30, 247), (247, 161), (161, 30), (174, 236), (236, 196), (196, 174), (103, 54), (54, 104), (104, 103), (55, 193), (193, 8), (8, 55), (111, 117), (117, 31), (31, 111), (221, 189), (189, 55), (55, 221), (240, 98), (98, 99), (99, 240), (142, 126), (126, 100), (100, 142), (219, 166), (166, 218), (218, 219), (112, 155), (155, 26), (26, 112), (198, 209), (209, 131), (131, 198), (169, 135), (135, 150), (150, 169), (114, 47), (47, 217), (217, 114), (224, 223), (223, 53), (53, 224), (220, 45), (45, 134), (134, 220), (32, 211), (211, 140), (140, 32), (109, 67), (67, 108), (108, 109), (146, 43), (43, 91), (91, 146), (231, 230), (230, 120), (120, 231), (247, 113), (105, 63), (63, 52), (52, 105), (241, 238), (238, 242), (242, 241), (124, 46), (46, 156), (156, 124), (95, 78), (78, 96), (96, 95), (70, 46), (46, 63), (63, 70), (116, 143), (116, 123), (123, 111), (111, 116), (1, 44), (44, 19), (19, 1), (3, 236), (236, 51), (51, 3), (207, 216), (216, 205), (205, 207), (26, 154), (154, 22), (22, 26), (165, 39), (39, 167), (167, 165), (199, 200), (200, 208), (208, 199), (101, 36), (36, 100), (100, 101), (43, 57), (57, 202), (202, 43), (242, 20), (20, 99), (99, 242), (56, 28), (28, 157), (157, 56), (124, 35), (35, 113), (113, 124), (29, 160), (160, 27), (27, 29), (211, 204), (204, 210), (210, 211), (124, 113), (113, 46), (46, 124), (106, 43), (43, 204), (204, 106), (77, 96), (137, 116), (73, 41), (41, 72), (72, 73), (36, 203), (203, 142), (142, 36), (235, 64), (64, 240), (240, 235), (64, 48), (42, 41), (41, 74), (74, 42), (214, 212), (212, 207), (207, 214), (183, 42), (42, 184), (184, 183), (210, 169), (169, 211), (211, 210), (140, 170), (170, 176), (176, 140), (104, 105), (105, 69), (69, 104), (193, 122), (122, 168), (168, 193), (50, 123), (123, 187), (187, 50), (89, 96), (96, 90), (90, 89), (66, 65), (65, 107), (107, 66), (179, 89), (89, 180), (180, 179), (119, 101), (101, 120), (120, 119), (68, 63), (63, 104), (104, 68), (16, 15), (15, 85), (85, 16), (209, 129), (15, 14), (14, 86), (86, 15), (107, 55), (55, 9), (9, 107), (120, 100), (100, 121), (121, 120), (153, 145), (145, 22), (22, 153), (178, 88), (88, 179), (179, 178), (197, 6), (6, 196), (196, 197), (89, 88), (88, 96), (96, 89), (135, 138), (138, 136), (136, 135), (138, 215), (215, 172), (172, 138), (218, 115), (115, 219), (219, 218), (41, 42), (42, 81), (81, 41), (5, 195), (195, 51), (51, 5), (57, 43), (43, 61), (61, 57), (208, 171), (171, 199), (199, 208), (41, 81), (81, 38), (38, 41), (224, 53), (53, 225), (225, 224), (24, 144), (144, 110), (110, 24), (105, 52), (52, 66), (66, 105), (118, 229), (229, 117), (117, 118), (66, 107), (107, 69), (69, 66), (10, 109), (109, 151), (151, 10), (219, 48), (48, 235), (235, 219), (191, 183), (142, 129), (129, 126), (126, 142), (116, 111), (111, 143), (143, 116), (118, 117), (117, 50), (50, 118), (52, 223), (94, 19), (19, 141), (141, 94), (221, 65), (196, 3), (3, 197), (197, 196), (45, 220), (220, 44), (44, 45), (156, 70), (70, 139), (139, 156), (188, 122), (122, 245), (245, 188), (139, 71), (71, 162), (162, 139), (149, 170), (170, 150), (150, 149), (122, 188), (188, 196), (196, 122), (206, 216), (216, 92), (92, 206), (164, 2), (2, 167), (167, 164), (242, 141), (141, 241), (241, 242), (0, 164), (164, 37), (37, 0), (11, 72), (72, 12), (12, 11), (12, 38), (38, 13), (13, 12), (70, 63), (63, 71), (71, 70), (111, 31), (36, 101), (101, 205), (205, 36), (203, 206), (206, 165), (165, 203), (126, 209), (209, 217), (217, 126), (98, 165), (165, 97), (97, 98), (237, 220), (220, 218), (218, 237), (237, 239), (239, 241), (241, 237), (210, 214), (214, 169), (169, 210), (140, 171), (171, 32), (32, 140), (241, 125), (125, 237), (237, 241), (179, 86), (86, 178), (178, 179), (180, 85), (85, 179), (179, 180), (181, 84), (84, 180), (180, 181), (182, 83), (83, 181), (181, 182), (194, 201), (201, 182), (182, 194), (177, 137), (137, 132), (132, 177), (184, 76), (76, 183), (183, 184), (185, 61), (61, 184), (184, 185), (186, 57), (57, 185), (185, 186), (216, 212), (212, 186), (186, 216), (192, 214), (214, 187), (187, 192), (139, 34), (34, 156), (156, 139), (218, 79), (79, 237), (237, 218), (147, 123), (123, 177), (177, 147), (45, 44), (44, 4), (4, 45), (208, 201), (201, 32), (32, 208), (98, 64), (64, 129), (129, 98), (192, 213), (213, 138), (138, 192), (235, 59), (59, 219), (219, 235), (141, 242), (242, 97), (97, 141), (97, 2), (2, 141), (141, 97), (240, 75), (75, 235), (235, 240), (229, 24), (24, 228), (228, 229), (31, 25), (230, 23), (23, 229), (229, 230), (231, 22), (22, 230), (230, 231), (232, 26), (26, 231), (231, 232), (233, 112), (112, 232), (232, 233), (244, 189), (189, 243), (243, 244), (189, 221), (221, 190), (190, 189), (28, 221), (223, 27), (224, 29), (29, 223), (223, 224), (225, 30), (30, 224), (224, 225), (113, 247), (247, 225), (225, 113), (99, 60), (60, 240), (240, 99), (213, 147), (147, 215), (215, 213), (60, 20), (20, 166), (166, 60), (192, 187), (187, 213), (213, 192), (243, 112), (112, 244), (244, 243), (244, 233), (233, 245), (245, 244), (245, 128), (128, 188), (188, 245), (188, 114), (114, 174), (174, 188), (134, 131), (131, 220), (220, 134), (174, 217), (217, 236), (236, 174), (236, 198), (198, 134), (134, 236), (215, 177), (177, 58), (58, 215), (156, 143), (143, 124), (124, 156), (25, 110), (110, 7), (7, 25), (31, 228), (228, 25), (25, 31), (0, 11), (151, 9), (17, 18), (18, 200), (8, 168), (168, 6), (9, 8), (199, 175), (197, 195), (4, 1), (94, 2)])



def draw_landmarks_on_image_left(rgb_image, detection_result):
  face_landmarks_list = detection_result.face_landmarks
  annotated_image = np.copy(rgb_image)

  # Loop through the detected faces to visualize.
  for idx in range(len(face_landmarks_list)):
    face_landmarks = face_landmarks_list[idx]

    # Draw the face landmarks.
    face_landmarks_proto = landmark_pb2.NormalizedLandmarkList()
    face_landmarks_proto.landmark.extend([
      landmark_pb2.NormalizedLandmark(x=landmark.x, y=landmark.y, z=landmark.z) for landmark in face_landmarks
    ])

    solutions.drawing_utils.draw_landmarks(
        image=annotated_image,
        landmark_list=face_landmarks_proto,
        connections=FACEMESH_LEFTSIDE,
        landmark_drawing_spec=None,
        connection_drawing_spec=solutions.drawing_styles
        .get_default_face_mesh_tesselation_style())
    solutions.drawing_utils.draw_landmarks(
        image=annotated_image,
        landmark_list=face_landmarks_proto,
        connections=solutions.face_mesh.FACEMESH_CONTOURS,
        landmark_drawing_spec=None,
        connection_drawing_spec=solutions.drawing_styles
        .get_default_face_mesh_contours_style())
    solutions.drawing_utils.draw_landmarks(
        image=annotated_image,
        landmark_list=face_landmarks_proto,
        connections=solutions.face_mesh.FACEMESH_LIPS,
        landmark_drawing_spec=None,
        connection_drawing_spec=solutions.drawing_styles
        .get_default_face_mesh_tesselation_style())
  return annotated_image



def draw_landmarks_on_image_simplified(rgb_image, detection_result):
  face_landmarks_list = detection_result.face_landmarks
  annotated_image = np.copy(rgb_image)

  # Loop through the detected faces to visualize.
  for idx in range(len(face_landmarks_list)):
    face_landmarks = face_landmarks_list[idx]

    # Draw the face landmarks.
    face_landmarks_proto = landmark_pb2.NormalizedLandmarkList()
    face_landmarks_proto.landmark.extend([
      landmark_pb2.NormalizedLandmark(x=landmark.x, y=landmark.y, z=landmark.z) for landmark in face_landmarks
    ])

    solutions.drawing_utils.draw_landmarks(
        image=annotated_image,
        landmark_list=face_landmarks_proto,
        connections=solutions.face_mesh.FACEMESH_LIPS,
        landmark_drawing_spec=None,
        connection_drawing_spec=solutions.drawing_styles
        .get_default_face_mesh_tesselation_style())
    solutions.drawing_utils.draw_landmarks(
        image=annotated_image,
        landmark_list=face_landmarks_proto,
        connections=solutions.face_mesh.FACEMESH_LEFT_EYEBROW,
        landmark_drawing_spec=None,
        connection_drawing_spec=solutions.drawing_styles
        .get_default_face_mesh_tesselation_style())
    solutions.drawing_utils.draw_landmarks(
        image=annotated_image,
        landmark_list=face_landmarks_proto,
        connections=solutions.face_mesh.FACEMESH_RIGHT_EYEBROW,
        landmark_drawing_spec=None,
        connection_drawing_spec=solutions.drawing_styles
        .get_default_face_mesh_tesselation_style())
    solutions.drawing_utils.draw_landmarks(
        image=annotated_image,
        landmark_list=face_landmarks_proto,
        connections=solutions.face_mesh.FACEMESH_NOSE,
        landmark_drawing_spec=None,
        connection_drawing_spec=solutions.drawing_styles
        .get_default_face_mesh_tesselation_style())
    solutions.drawing_utils.draw_landmarks(
        image=annotated_image,
        landmark_list=face_landmarks_proto,
        connections=solutions.face_mesh.FACEMESH_CONTOURS,
        landmark_drawing_spec=None,
        connection_drawing_spec=solutions.drawing_styles
        .get_default_face_mesh_contours_style())
    solutions.drawing_utils.draw_landmarks(
        image=annotated_image,
        landmark_list=face_landmarks_proto,
        connections=solutions.face_mesh.FACEMESH_IRISES,
          landmark_drawing_spec=None,
          connection_drawing_spec=solutions.drawing_styles
          .get_default_face_mesh_iris_connections_style())

  return annotated_image

def draw_landmarks_on_image(rgb_image, detection_result):
  face_landmarks_list = detection_result.face_landmarks
  annotated_image = np.copy(rgb_image)

  # Loop through the detected faces to visualize.
  for idx in range(len(face_landmarks_list)):
    face_landmarks = face_landmarks_list[idx]

    # Draw the face landmarks.
    face_landmarks_proto = landmark_pb2.NormalizedLandmarkList()
    face_landmarks_proto.landmark.extend([
      landmark_pb2.NormalizedLandmark(x=landmark.x, y=landmark.y, z=landmark.z) for landmark in face_landmarks
    ])

    solutions.drawing_utils.draw_landmarks(
        image=annotated_image,
        landmark_list=face_landmarks_proto,
        connections=solutions.face_mesh.FACEMESH_TESSELATION,
        landmark_drawing_spec=None,
        connection_drawing_spec=solutions.drawing_styles
        .get_default_face_mesh_tesselation_style())
    solutions.drawing_utils.draw_landmarks(
        image=annotated_image,
        landmark_list=face_landmarks_proto,
        connections=solutions.face_mesh.FACEMESH_CONTOURS,
        landmark_drawing_spec=None,
        connection_drawing_spec=solutions.drawing_styles
        .get_default_face_mesh_contours_style())
    solutions.drawing_utils.draw_landmarks(
        image=annotated_image,
        landmark_list=face_landmarks_proto,
        connections=solutions.face_mesh.FACEMESH_IRISES,
          landmark_drawing_spec=None,
          connection_drawing_spec=solutions.drawing_styles
          .get_default_face_mesh_iris_connections_style())

  return annotated_image

def init_model(filepath):
    BaseOptions = tasks.BaseOptions
    FaceLandmarker = tasks.vision.FaceLandmarker
    FaceLandmarkerOptions = tasks.vision.FaceLandmarkerOptions

    base_options = BaseOptions(model_asset_path=filepath)
    options = FaceLandmarkerOptions(base_options=base_options, num_faces=1)

    #Test the model
    detector2 = FaceLandmarker.create_from_options(options)

    return detector2

def detect_faces(detector, cv2_image_data, maskMode):
    image = Image(image_format=ImageFormat.SRGB, data=cv2_image_data)
    detection_result = detector.detect(image) #this is the line
    
    if maskMode == MASK_MODE_FULL:
       return detection_result, draw_landmarks_on_image(image.numpy_view(), detection_result)
    elif maskMode == MASK_MODE_LEFT:
        return detection_result, draw_landmarks_on_image_left(image.numpy_view(), detection_result)
    elif maskMode == MASK_MODE_SIMPLIFIED:
        return detection_result, draw_landmarks_on_image_simplified(image.numpy_view(), detection_result)